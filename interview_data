###############################   Linux  #############################################

1. Recursively list all files in a directory including files in symlink directories ?
--> #ls -LR

2. If process is running or not on Linux ?
--> #pgrep nginx , # pgrep apache2, #pidof nginx

3. Create and Use Array in Bash Script ?
--> You have two ways to create a new array in bash script. 
    The first one is to use declare command to define an Array. This command will define an associative array named test_array.
    #declare -a test_array
    
    In another way, you can simply create Array by assigning elements --> #test_array=(apple orange lemon)
    Bash array elements can be accessed using index number starts from 0 then 1,2,3…n. 
    #echo ${test_array[0]}
    apple.
    
 4. How to check if file or directory exist or not in Bash ?
 --> FILE=/etc/resolv.conf
     if [ -f "$FILE" ]; then
        echo "$FILE exists."
     else 
        echo "$FILE does not exist."
     fi
     ........................................
     Check if Directory Exist -->
     FILE=/etc/docker
     if [ -d "$FILE" ]; then
        echo "$FILE is a directory."
     fi
     
  5. Shell script to watch the disk space ?
  --> #!/bin/sh
      df -H | grep -vE '^Filesystem|tmpfs|cdrom' | awk '{ print $5 " " $1 }' | while read output;
      do
        echo $output
        usep=$(echo $output | awk '{ print $1}' | cut -d'%' -f1  )
        partition=$(echo $output | awk '{ print $2 }' )
        if [ $usep -ge 90 ]; then
          echo "Running out of space \"$partition ($usep%)\" on $(hostname) as on $(date)" |
          mail -s "Alert: Almost out of disk space $usep%" you@somewhere.com
        fi
      done
      
   6. shell code to calculate factorial using while loop ?
   -->  #!/bin/bash
        counter=$1
        factorial=1
        while [ $counter -gt 0 ]
        do
           factorial=$(( $factorial * $counter ))
           counter=$(( $counter - 1 ))
        done
        echo $factorial
	
   7. Cron job log file location in linux ?
   --> Sometimes it can be useful to continuously monitor it, in that case:
       tail -f /var/log/syslog | grep CRON





#############################  Python ##################################################

1. Python program to check if a string is palindrome or not ?
--> # function which return reverse of a string

def isPalindrome(s):
	return s == s[::-1]


# Driver code
s = "malayalam"
ans = isPalindrome(s)

if ans:
	print("Yes")
else:
	print("No")

2. Inbuilt Data Structures in Python ?
-->  Lists, Dictionary, Tuple and Set.
     Lists: Lists in Python are one of the most versatile collection object types available. 
     The other two types are dictionaries and tuples, but they are really more like variations of lists.
Lists can be used for any type of object, from numbers and strings to more lists.
They are accessed just like strings (e.g. slicing and concatenation) so they are simple to use and they’re variable length, i.e. they grow and shrink automatically as they’re used.
In reality, Python lists are C arrays inside the Python interpreter and act just like an array of pointers.

Dictionary: In python, dictionary is similar to hash or maps in other languages. 
            It consists of key value pairs. The value can be accessed by unique key in the dictionary. 
            Keys are unique & immutable objects.
            dictionary = {"keyname": value}

Tuple : Python tuples work exactly like Python lists except they are immutable, 
        i.e. they can’t be changed in place. 
        They are normally written inside parentheses to distinguish them from lists (which use square brackets), 
        but as you’ll see, parentheses aren’t always necessary. Since tuples are immutable, their length is fixed. 
        To grow or shrink a tuple, a new tuple must be created. 

Sets: Unordered collection of unique objects. 
      Set operations such as union (|) , intersection(&), difference(-) can be applied on a set.
      Frozen Sets are immutable i.e once created further data can’t be added to them
      {} are used to represent a set.
      Objects placed inside these brackets would be treated as a set.







##############################  DevOps #################################################################

##############################  GIT ############################################

1. Changing git commit message after push ?
--> #git commit --amend



##############################  Docker ##########################################

1. How to check memory and CPU utilization of docker running contanier ?
--> # docker stats (Note: by default limit you see is the total memory of the VM in which docker runs.)
      By default, Docker containers have access to the full RAM and CPU resources of the host.
      
2. Limit Docker Container Memory Access and CPU ?
--> #docker run -it --memory="1g" ubuntu
    #docker run -it --cpus="1.0" ubuntu 
    
##############################  K8s ###############################################

1. Difference between job and cron jobs in kubernetes ?
--> Kubernetes Jobs are used to create transient pods that perform specific tasks they are assigned to.
    CronJobs do the same thing, but they run tasks based on a defined schedule. 
    Jobs play an important role in Kubernetes, especially for running batch processes or important ad-hoc operations.
    
    Kubernetes Jobs:
    Here is a snippet of the file that you can use to create an example Kubernetes Job:
    ---
    apiVersion: batch/v1          ## The version of the Kubernetes API
    kind: Job                     ## The type of object for jobs
    metadata:
      name: job-test
    spec:                        ## What state you desire for the object
      template:
        metadata:
          name: job-test
        spec:
          containers:
          - name: job
            image: busybox                  ##  Image used
            command: ["echo", "job-test"]   ##  Command used to create logs for verification later
	  restartPolicy: OnFailure          ##  Restart Policy in case container failed
	  
Kubernetes CronJobs:

apiVersion: batch/v1beta1            ## The version of the Kubernetes API
kind: CronJob                        ## The type of object for Cron jobs
metadata:
  name: cron-test
spec:
  schedule: "*/1 * * * *"            ## Defined schedule using the *nix style cron syntax
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: cron-test
            image: busybox            ## Image used
            args:
           - /bin/sh
            - -c
            - date; echo Hello this is Cron test
          restartPolicy: OnFailure    ##  Restart Policy in case container failed
	  
	  
2. Difference between Deployment and Replica set?
--> ReplicaSet ensures that a specified number of pod replicas are running at any given time. 
    However, Deployment is a higher-level concept that manages ReplicaSets and provides declarative updates to Pods along with a lot of other useful features.
    
3. What is daemonset ?	
-->  It is used to ensure that some or all of your pods are scheduled and running on every single available node. 
     This essentially runs a copy of the desired pod across all nodes.
     When a new node is added to a Kubernetes cluster, a new pod will be added to that newly attached node.
